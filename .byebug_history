c
params
c
params
c
params
paramas
request.subdomain
c
  establish_connection(Rails.env.to_sym) if Setting.find_by(key: "VISIBLE").value != "0"
@settings["VISIBLE"]
@setting.all
@setting
setting
settings
c
@requests
@requests.delete_all
@requests.all.each {|r| r.user_id = 4 && r.save}
@requests.all.each {|r| r.save}
@requests.all.each {|r| r.user_id = 4}
User.count
User.all
r
r.user
c
@requests.all.pluck(:user_id)
@requests
c
@requests.all.pluck(:id)
@requests.all.count
@requests
c
request.subdomain
c
request.subdomain
c
request.subdomain
c
request.subdomain(0)
request.subdomain(1)
request.subdomain
c
request.subdomain
        ActiveRecord::Base.establish_connection(default_config.dup.update(:database => "blnkk_#{request.subdomain}"))
c
request.subdomain
ENV['DATA_URL']
request.url
request
c
request.subdomain(0)
request.subdomain
request.subdomain(1)
c
request.subdomain(1)
request.subdomain
root_url
url
c
root_url
url_for
c
request.subdomain
request.subdomain(1)
request.subdomain(0)
request.subdomain(1)
request.subdomain
c
request.subdomain(0)
request.subdomain(2)
request.subdomain(1)
request.subdomain
c
request.subdomain
c
request.subdomain
c
detect_locale
url_for
c
root_url
url_for(params.merge(ln: detect_locale))
  detect_locale = request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first
  request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).second
  request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}/).first
 request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}-[A-Z]{2}/).first
request.env['HTTP_ACCEPT_LANGUAGE'].present?
            detect_locale = l if I18n.available_locales.include?(l.to_sym) && (@locale_primary == l.to_sym || @locale_secondary == l.to_sym )
          request.env['HTTP_ACCEPT_LANGUAGE'].scan(/^[a-z]{2}-[A-Z]{2}/).each do |l|
        if request.env['HTTP_ACCEPT_LANGUAGE'].present?
params
url_for(params.merge(ln: detect_locale))
c
request.base_url
request.base_ur;
base_url
c
request
c
request.fullpath
request.@fullpath
request
c
request
c
request
c
request
c
request
c
request.subdomain = "dongmen"
request.subdomain.empty?
request.subdomain
request
requst
c
tags.order(:position)
tags.order(position)
tags.order(position: :desc)
tags
c
oldone
n
c
oldone
oldone = nil
oldone
n
c
self
oldone.nil?
oldone
n
oldone
n
oldone
n
oldone
c
n
oldone
oldones.first
oldones
ones
self
oldone
n
thisonesposition
n
thisonesposition
thisonesid
n
self
c
self.id
self
params
object
thisonesid
c
thisonesid
c
exit
c
 oldones = ActsAsTaggableOn::Tag.where(position: thisone)
thisone
self.position
self
params
exit
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
 ActsAsTaggableOn::Tag.where(position: thisone)
c
params[:acts_as_taggable_on_tag]
params
c
 @city_image.update_attributes(city_image_params)
@tag.update_attributes(tag_params) && city_image_params.present?
c
params
      params.require(:city_image).permit(:banner, :small) 
city_image_params.try
city_image_pararms.try
c
n
city_image_params
tag_params
params
c
params[:state]
c
params[:state]
c
params[:state]
params
c
params
c
params[:state]
c
params[:state]
n
params
c
n
state_params
n
user_info
n
state_params["type"]
n
provider
n
state_params["redirect"]
n
params[:state]
n
params[:code]
n
params[:error]
params
c
params[:tag].downcase
params[:tag]
current_user.tag_list
current_user.tag_list.remove
params
current_user.tag_list
current_user
params
c
city_image_params
params
c
city_image_params
c
params
c
